substitutions:
  _IMAGE_NAME: 'gcr.io/${PROJECT_ID}/candy-shop:${SHORT_SHA}'
  _SERVICE_NAME: 'candy-shop-service'
  _REGION: 'us-central1'

steps:

  # Build docker image 
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build docker image'
    args: ['build', '-t', '$_IMAGE_NAME', '.']

  # Get .env file for compose
  - name: gcr.io/cloud-builders/gcloud
    id: 'get compose .env file'
    entrypoint: 'bash'
    args: [ '-c', "gcloud secrets versions access latest --secret=candyshop_compose_env_file --format='get(payload.data)' | tr '_-' '/+' | base64 -d > .env" ]

  # Start compose services
  - name: 'gcr.io/cloud-builders/docker'
    id: 'start compose services'
    entrypoint: 'sh'
    env:
      - 'IMAGE_NAME=${_IMAGE_NAME}'
    args:
      - '-c'
      - | 
          docker compose --env-file=.env -f ./docker-compose.yaml up -d 
          docker compose logs app 

  # Test app response
  - name: 'curlimages/curl'
    id: 'test app response'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
          sleep 10
          curl -f http://app:3000 || exit 1

  # Push docker image to GCR if the app passes the test
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push docker image'
    args: ['push', '$_IMAGE_NAME']
  
 # Get .env file for cloudrun
  - name: gcr.io/cloud-builders/gcloud
    id: 'get cloudrun .env file'
    entrypoint: 'bash'
    args: [ '-c', "gcloud secrets versions access latest --secret=candyshop_cloudrun_env_file --format='get(payload.data)' | tr '_-' '/+' | base64 -d > .env.yaml" ]

    # Deploy the app to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy to cloud run'
    args:
      - 'run'
      - 'deploy'
      - '$_SERVICE_NAME'
      - '--image'
      - '$_IMAGE_NAME'
      - '--region'
      - '$_REGION'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--port'
      - '3000' 
      - '--env-vars-file'
      - '.env.yaml'

images:
  - $_IMAGE_NAME

options:
  logging: CLOUD_LOGGING_ONLY
